# -*- coding: utf-8 -*-
"""
Created on Thu Mar  7 14:09:01 2019

@author: Théo
"""

import os
from datetime import datetime as time
from Class_Graph import Graph
from Class_Arret import Arret
from Class_Arc import Arc

class Exploitation_fichier :
    def __init__():
        pass
    
    def Arc_Arret (FileName,Num_Ligne) :
        os.chdir("C:\\Users\\Théo\\Documents\\Cours\\S6\\PROJ631 - Projet algorithmique\\data")
        with open(FileName,"r") as f:
            type_ligne =0
            retour = 0
            holiday = False
            liste_arret=[]
            liste_arc=[]
                        
        
            for ligne in f:
                
                """
                on va determiner si la liste est une liste d'arret 
                ou les horaires d'un arret
                initialement c'est une liste d'arret
                type_ligne = [0,1,2,3,4] = [liste arret,arret aller, arret retour, arret allerV, arret retourV]
                
                """
                
                if type_ligne == 0 and ligne == '\n' and holiday == False:
                    type_ligne = 1
                    indice_arret = 0
        
                elif type_ligne == 1 and ligne == '\n' and holiday == False: 
                    retour = 1
                    type_ligne = 2
                    holiday = True
                    indice_arret = len(liste_arret)-1
        
                elif type_ligne == 2 and ligne == '\n' and holiday == True:
                    type_ligne = 0
                    retour = 0
        
                elif type_ligne == 0 and ligne == '\n' and holiday == True:
                    type_ligne = 3
                    indice_arret = 0
                    retour = 1
        
                elif type_ligne == 3 and ligne == '\n' and retour == 1:
                    type_ligne = 4
                    indice_arret = len(liste_arret)-1
                    retour = 0
                    holiday = False
                    
                    
                    
                """
                on va maintenant traiter la ligne selon son type
                """
                
                if type_ligne == 0 and holiday== False :#c'est une liste d'arrets, mais on ne traite pas en holiday car c'est la meme chose
                    ligne.translate({ord(i): None for i in '\n'})
                    for str_nom_arret in ligne.split(" N "):
                        if " + " in str_nom_arret :
                            for split in str_nom_arret.split(" + "):
                                nom_arret = Arret(split,splited = True)
                                liste_arret.append(nom_arret)
                        else :
                            nom_arret = Arret(str_nom_arret, splited = False)
                            liste_arret.append(nom_arret)


                    for i in range (len(liste_arret)-1):
                        if liste_arret[i].splited == True and liste_arret[i+1].splited == True:
                            liste_arc.append(Arc(liste_arret[i].getName(),liste_arret[i+2].getName()))
                        else :
                            liste_arc.append(Arc(liste_arret[i].getName(),liste_arret[i+1].getName()))
                    
                    
                
                        
                
                liste=[]
                if type_ligne == 1 :
                    if ligne == '\n':
                        pass
                    else :
                        first_elt = 0
                        for horaire in ligne.split(" "):
                            if first_elt == 0 :
                                first_elt = 1
                            else:
                                liste.append(horaire)
                        liste_arret[indice_arret].setHeure_aller(liste)
                        indice_arret +=1
        
                liste=[]
                if type_ligne == 2 :
                    if ligne == '\n':
                        pass
                    else :
                        first_elt = 0
                        for horaire in ligne.split(" "):
                            if first_elt == 0 :
                                first_elt = 1
                            else:
                                liste.append(horaire)
                        liste_arret[indice_arret].setHeure_retour(liste)
                        indice_arret -=1        
              
                liste=[]
                if type_ligne == 3 :
                    if ligne == '\n':
                        pass
                    else :
                        first_elt = 0
                        for horaire in ligne.split(" "):
                            if first_elt == 0 :
                                first_elt = 1
                            else:
                                liste.append(horaire)
                        liste_arret[indice_arret].setHeure_allerV(liste)
                        indice_arret +=1       
                
                liste=[]
                if type_ligne == 4 :
                    if ligne == '\n':
                        pass
                    else :
                        first_elt = 0
                        for horaire in ligne.split(" "):
                            if first_elt == 0 :
                                first_elt = 1
                            else:
                                liste.append(horaire)
                        liste_arret[indice_arret].setHeure_retourV(liste)
                        indice_arret -=1         
        

        '''
        Maintenant qu'on a traité tout les horaires des arrets il faut mettre une duree a chaque arc
        '''
        ###On calcule toute les durées de l'aller
        for i in range(len(liste_arret)-1):
            if liste_arret[i].splited == True and liste_arret[i+1].splited == True:
                liste_horaire1 = liste_arret[i].getHeure_aller()
                liste_horaire2 = liste_arret[i+2].getHeure_aller()
            else :
                liste_horaire1 = liste_arret[i].getHeure_aller()
                liste_horaire2 = liste_arret[i+1].getHeure_aller()
            liste_duree = []

            for j in range (len(liste_horaire1)):
                if liste_horaire1[j] == '-' or liste_horaire2[j] == '-' or '\n' in liste_horaire1[j] or '\n' in liste_horaire2[j]:
                    liste_duree.append('-')
                else:
                    temps1 = time.strptime(liste_horaire1[j],'%H:%M')
                    temps2 = time.strptime(liste_horaire2[j],'%H:%M')
                    duree = temps2- temps1
                    liste_duree.append(str(duree))
            liste_arc[i].setTemps_aller(liste_duree)
            
        ###On calcule toute les durées du retour    
        for i in range(len(liste_arret)-1):
            liste_horaire2 = liste_arret[i].getHeure_retour()
            liste_horaire1 = liste_arret[i+1].getHeure_retour()
            liste_duree = []
            for j in range (len(liste_horaire1)):
                if liste_horaire1[j] == '-' or liste_horaire2[j] == '-' or '\n' in liste_horaire1[j] or '\n' in liste_horaire2[j]:
                    liste_duree.append('-')
                else:
                    temps1 = time.strptime(liste_horaire1[j],'%H:%M')
                    temps2 = time.strptime(liste_horaire2[j],'%H:%M')
                    duree = temps2- temps1
                    liste_duree.append(str(duree))
            liste_arc[i].setTemps_retour(liste_duree)
            
        ###On calcule toute les durées de l'aller en preriode de vacances
        for i in range(len(liste_arret)-1):
            liste_horaire1 = liste_arret[i].getHeure_allerV()
            liste_horaire2 = liste_arret[i+1].getHeure_allerV()
            liste_duree = []
            for j in range (len(liste_horaire1)):
                if liste_horaire1[j] == '-' or liste_horaire2[j] == '-' or '\n' in liste_horaire1[j] or '\n' in liste_horaire2[j]:
                    liste_duree.append('-')
                else:
                    temps1 = time.strptime(liste_horaire1[j],'%H:%M')
                    temps2 = time.strptime(liste_horaire2[j],'%H:%M')
                    duree = temps2- temps1
                    liste_duree.append(str(duree))
            liste_arc[i].setTemps_allerV(liste_duree)
            
        ###On calcule toute les durées du retour en période de vacances    
        for i in range(len(liste_arret)-1):
            liste_horaire2 = liste_arret[i].getHeure_retourV()
            liste_horaire1 = liste_arret[i+1].getHeure_retourV()
            liste_duree = []
            for j in range (len(liste_horaire1)):
                if liste_horaire1[j] == '-' or liste_horaire2[j] == '-' or '\n' in liste_horaire1[j] or '\n' in liste_horaire2[j]:
                    liste_duree.append('-')
                else:
                    temps1 = time.strptime(liste_horaire1[j],'%H:%M')
                    temps2 = time.strptime(liste_horaire2[j],'%H:%M')
                    duree = temps2- temps1
                    liste_duree.append(str(duree))
            liste_arc[i].setTemps_retourV(liste_duree)
            
            
            
            
        return liste_arc , liste_arret
    
    
    
    ###Permet de creer un graph avec tout les arrets depuis la liste des lignes
    def graph(liste_ligne):
        liste_all_arret =[]
        for ligne in liste_ligne :
            #on convertit le temps en entiercar le temps est toujours en minute
            for arc in ligne[1] :
                cost_aller = str(arc.getTemps_aller()[0])
                if cost_aller == '-':
                    i=0
                    while cost_aller == '-':
                        i+=1
                        cost_aller = arc.getTemps_aller()[i]
                            
                            
                cost_aller = cost_aller.replace('0','')
                cost_aller = cost_aller.replace(':','')   
                cost_aller = int(cost_aller)
                
                cost_retour = str(arc.getTemps_retour()[0])
                if cost_retour == '-':
                    i=0
                    while cost_retour == '-':
                        i-=1
                        cost_retour = arc.getTemps_retour()[i]
                cost_retour = cost_retour.replace('0','')
                cost_retour = cost_retour.replace(':','')         
                cost_retour = int(cost_retour)
                #on ajoute a la liste qui cinsttuera le graph l'arc aller et retour
                liste_all_arret.append((arc.getArret_dep(),arc.getArret_arr(),cost_aller))
                liste_all_arret.append((arc.getArret_arr(),arc.getArret_dep(),cost_retour))
        return Graph(liste_all_arret)